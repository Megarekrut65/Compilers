
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 15 13:24:40 PDT 2022
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun May 15 13:24:40 PDT 2022
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\005\007\000\002\005\011\000\002\005\011\000" +
    "\002\006\002\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\007\013\000\002\007\012\000\002\007" +
    "\006\000\002\007\006\000\002\007\013\000\002\007\012" +
    "\000\002\010\005\000\002\010\003\000\002\010\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\014\005\000\002\014\012\000\002\014\011\000\002\014" +
    "\010\000\002\014\007\000\002\014\006\000\002\014\005" +
    "\000\002\014\011\000\002\014\007\000\002\014\005\000" +
    "\002\014\004\000\002\014\007\000\002\014\004\000\002" +
    "\014\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\004\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\004\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\012\005\000\002\012" +
    "\003\000\002\012\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\004\000\002\015\010\000" +
    "\002\015\010\000\002\015\005\000\002\015\005\000\002" +
    "\016\011\000\002\016\010\000\002\017\004\000\002\017" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\006\003\006\004\010\001\002\000\010\002" +
    "\001\003\257\004\010\001\002\000\004\002\263\001\002" +
    "\000\004\004\010\001\002\000\004\043\255\001\002\000" +
    "\004\055\011\001\002\000\006\011\013\050\012\001\002" +
    "\000\010\003\ufff8\051\ufff8\056\021\001\002\000\006\003" +
    "\015\055\014\001\002\000\004\050\250\001\002\000\004" +
    "\050\016\001\002\000\010\003\ufff8\051\ufff8\056\021\001" +
    "\002\000\004\043\247\001\002\000\010\003\242\051\244" +
    "\056\021\001\002\000\006\044\022\045\023\001\002\000" +
    "\006\003\237\055\236\001\002\000\010\003\026\046\025" +
    "\056\027\001\002\000\006\042\223\046\224\001\002\000" +
    "\004\044\036\001\002\000\004\044\034\001\002\000\004" +
    "\044\031\001\002\000\006\042\uffed\046\uffed\001\002\000" +
    "\006\003\033\055\032\001\002\000\006\042\uffeb\046\uffeb" +
    "\001\002\000\006\042\uffea\046\uffea\001\002\000\004\055" +
    "\035\001\002\000\006\042\uffe9\046\uffe9\001\002\000\004" +
    "\055\037\001\002\000\004\050\040\001\002\000\040\003" +
    "\051\007\047\012\057\017\042\020\053\024\043\025\050" +
    "\027\054\041\056\045\060\050\041\052\045\053\044\054" +
    "\046\056\052\001\002\000\040\003\212\007\047\012\057" +
    "\017\042\020\053\024\043\025\050\027\054\041\056\045" +
    "\060\050\041\052\045\053\044\054\046\056\052\001\002" +
    "\000\036\007\047\012\057\017\042\020\053\024\043\025" +
    "\050\027\054\041\056\045\060\050\041\052\045\053\044" +
    "\054\046\056\052\001\002\000\004\055\204\001\002\000" +
    "\052\005\uffcf\006\uffcf\010\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\022\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\001\002\000\052\005\uffce\006\uffce\010\uffce\014" +
    "\uffce\015\uffce\016\uffce\022\uffce\030\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043" +
    "\uffce\046\uffce\047\uffce\051\uffce\001\002\000\052\005\uffcd" +
    "\006\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\022\uffcd\030" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\042\uffcd\043\uffcd\046\uffcd\047\uffcd\051\uffcd\001" +
    "\002\000\036\007\047\012\057\017\042\020\053\024\043" +
    "\025\050\027\054\041\056\045\060\050\041\052\045\053" +
    "\044\054\046\056\052\001\002\000\036\007\047\012\057" +
    "\017\042\020\053\024\043\025\050\027\054\041\056\045" +
    "\060\050\041\052\045\053\044\054\046\056\052\001\002" +
    "\000\004\051\174\001\002\000\056\005\uffd0\006\uffd0\010" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\022\uffd0\026\167\030\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\042\uffd0\043\uffd0\045\166\046\uffd0\047\uffd0\051\uffd0" +
    "\001\002\000\036\007\047\012\057\017\042\020\053\024" +
    "\043\025\050\027\054\041\056\045\060\050\041\052\045" +
    "\053\044\054\046\056\052\001\002\000\036\007\047\012" +
    "\057\017\042\020\053\024\043\025\050\027\054\041\056" +
    "\045\060\050\041\052\045\053\044\054\046\056\052\001" +
    "\002\000\026\030\066\032\065\033\070\034\062\035\063" +
    "\036\064\037\073\040\067\047\072\051\144\001\002\000" +
    "\036\007\047\012\057\017\042\020\053\024\043\025\050" +
    "\027\054\041\056\045\060\050\041\052\045\053\044\054" +
    "\046\056\052\001\002\000\006\003\124\056\125\001\002" +
    "\000\036\007\047\012\057\017\042\020\053\024\043\025" +
    "\050\027\054\041\056\045\060\050\041\052\045\053\044" +
    "\054\046\056\052\001\002\000\026\030\066\032\065\033" +
    "\070\034\062\035\063\036\064\037\073\040\067\046\071" +
    "\047\072\001\002\000\036\007\047\012\057\017\042\020" +
    "\053\024\043\025\050\027\054\041\056\045\060\050\041" +
    "\052\045\053\044\054\046\056\052\001\002\000\036\007" +
    "\047\012\057\017\042\020\053\024\043\025\050\027\054" +
    "\041\056\045\060\050\041\052\045\053\044\054\046\056" +
    "\052\001\002\000\036\007\047\012\057\017\042\020\053" +
    "\024\043\025\050\027\054\041\056\045\060\050\041\052" +
    "\045\053\044\054\046\056\052\001\002\000\036\007\047" +
    "\012\057\017\042\020\053\024\043\025\050\027\054\041" +
    "\056\045\060\050\041\052\045\053\044\054\046\056\052" +
    "\001\002\000\036\007\047\012\057\017\042\020\053\024" +
    "\043\025\050\027\054\041\056\045\060\050\041\052\045" +
    "\053\044\054\046\056\052\001\002\000\004\056\111\001" +
    "\002\000\036\007\047\012\057\017\042\020\053\024\043" +
    "\025\050\027\054\041\056\045\060\050\041\052\045\053" +
    "\044\054\046\056\052\001\002\000\052\005\uffd1\006\uffd1" +
    "\010\uffd1\014\uffd1\015\uffd1\016\uffd1\022\uffd1\030\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\042\uffd1\043\uffd1\046\uffd1\047\uffd1\051\uffd1\001\002\000" +
    "\004\055\075\001\002\000\036\007\047\012\057\017\042" +
    "\020\053\024\043\025\050\027\054\041\056\045\060\050" +
    "\041\052\045\053\044\054\046\056\052\001\002\000\044" +
    "\005\uffd5\006\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5\022" +
    "\uffd5\032\065\033\070\034\062\035\063\040\067\042\uffd5" +
    "\043\uffd5\046\uffd5\047\072\051\uffd5\001\002\000\004\040" +
    "\076\001\002\000\004\056\077\001\002\000\004\045\100" +
    "\001\002\000\040\007\047\012\057\017\042\020\053\024" +
    "\043\025\050\027\054\041\056\045\060\046\102\050\041" +
    "\052\045\053\044\054\046\056\052\001\002\000\006\042" +
    "\104\046\105\001\002\000\052\005\uffe6\006\uffe6\010\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\022\uffe6\030\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6" +
    "\043\uffe6\046\uffe6\047\uffe6\051\uffe6\001\002\000\030\030" +
    "\066\032\065\033\070\034\062\035\063\036\064\037\073" +
    "\040\067\042\uffcb\046\uffcb\047\072\001\002\000\040\003" +
    "\106\007\047\012\057\017\042\020\053\024\043\025\050" +
    "\027\054\041\056\045\060\050\041\052\045\053\044\054" +
    "\046\056\052\001\002\000\052\005\uffe7\006\uffe7\010\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\022\uffe7\030\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\046\uffe7\047\uffe7\051\uffe7\001\002\000\006\042" +
    "\uffca\046\uffca\001\002\000\030\030\066\032\065\033\070" +
    "\034\062\035\063\036\064\037\073\040\067\042\uffcc\046" +
    "\uffcc\047\072\001\002\000\052\005\uffd7\006\uffd7\010\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\022\uffd7\030\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\067\042\uffd7" +
    "\043\uffd7\046\uffd7\047\072\051\uffd7\001\002\000\004\045" +
    "\112\001\002\000\040\007\047\012\057\017\042\020\053" +
    "\024\043\025\050\027\054\041\056\045\060\046\114\050" +
    "\041\052\045\053\044\054\046\056\052\001\002\000\006" +
    "\042\104\046\115\001\002\000\052\005\uffe4\006\uffe4\010" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\022\uffe4\030\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\043\uffe4\046\uffe4\047\uffe4\051\uffe4\001\002\000\052" +
    "\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015\uffe5\016\uffe5\022" +
    "\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\042\uffe5\043\uffe5\046\uffe5\047\uffe5\051" +
    "\uffe5\001\002\000\044\005\uffd4\006\uffd4\010\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\022\uffd4\032\065\033\070\034\062\035" +
    "\063\040\067\042\uffd4\043\uffd4\046\uffd4\047\072\051\uffd4" +
    "\001\002\000\052\005\uffda\006\uffda\010\uffda\014\uffda\015" +
    "\uffda\016\uffda\022\uffda\030\uffda\032\uffda\033\070\034\uffda" +
    "\035\063\036\uffda\037\uffda\040\067\042\uffda\043\uffda\046" +
    "\uffda\047\072\051\uffda\001\002\000\044\005\uffd3\006\uffd3" +
    "\010\uffd3\014\uffd3\015\uffd3\016\uffd3\022\uffd3\032\065\033" +
    "\070\034\062\035\063\040\067\042\uffd3\043\uffd3\046\uffd3" +
    "\047\072\051\uffd3\001\002\000\052\005\uffd8\006\uffd8\010" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\022\uffd8\030\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\067\042" +
    "\uffd8\043\uffd8\046\uffd8\047\072\051\uffd8\001\002\000\052" +
    "\005\uffd9\006\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9\022" +
    "\uffd9\030\uffd9\032\uffd9\033\070\034\uffd9\035\063\036\uffd9" +
    "\037\uffd9\040\067\042\uffd9\043\uffd9\046\uffd9\047\072\051" +
    "\uffd9\001\002\000\052\005\uffde\006\uffde\010\uffde\014\uffde" +
    "\015\uffde\016\uffde\022\uffde\030\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde" +
    "\046\uffde\047\uffde\051\uffde\001\002\000\006\010\140\042" +
    "\137\001\002\000\004\044\126\001\002\000\004\055\127" +
    "\001\002\000\010\010\uffbe\026\131\042\uffbe\001\002\000" +
    "\006\010\134\042\133\001\002\000\036\007\047\012\057" +
    "\017\042\020\053\024\043\025\050\027\054\041\056\045" +
    "\060\050\041\052\045\053\044\054\046\056\052\001\002" +
    "\000\032\010\uffbf\030\066\032\065\033\070\034\062\035" +
    "\063\036\064\037\073\040\067\042\uffbf\043\uffbf\047\072" +
    "\001\002\000\006\003\124\056\125\001\002\000\036\007" +
    "\047\012\057\017\042\020\053\024\043\025\050\027\054" +
    "\041\056\045\060\050\041\052\045\053\044\054\046\056" +
    "\052\001\002\000\052\005\uffc4\006\uffc4\010\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\022\uffc4\030\066\032\065\033\070\034" +
    "\062\035\063\036\064\037\073\040\067\042\uffc4\043\uffc4" +
    "\046\uffc4\047\072\051\uffc4\001\002\000\052\005\uffc5\006" +
    "\uffc5\010\uffc5\014\uffc5\015\uffc5\016\uffc5\022\uffc5\030\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\042\uffc5\043\uffc5\046\uffc5\047\uffc5\051\uffc5\001\002" +
    "\000\006\003\124\056\125\001\002\000\036\007\047\012" +
    "\057\017\042\020\053\024\043\025\050\027\054\041\056" +
    "\045\060\050\041\052\045\053\044\054\046\056\052\001" +
    "\002\000\052\005\uffc3\006\uffc3\010\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\022\uffc3\030\066\032\065\033\070\034\062\035" +
    "\063\036\064\037\073\040\067\042\uffc3\043\uffc3\046\uffc3" +
    "\047\072\051\uffc3\001\002\000\052\005\uffc2\006\uffc2\010" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\022\uffc2\030\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\043\uffc2\046\uffc2\047\uffc2\051\uffc2\001\002\000\052" +
    "\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6\016\uffd6\022" +
    "\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\067\042\uffd6\043\uffd6\046\uffd6\047\072\051" +
    "\uffd6\001\002\000\004\043\ufff3\001\002\000\052\005\uffd2" +
    "\006\uffd2\010\uffd2\014\uffd2\015\uffd2\016\uffd2\022\uffd2\030" +
    "\066\032\065\033\070\034\062\035\063\036\064\037\073" +
    "\040\067\042\uffd2\043\uffd2\046\uffd2\047\072\051\uffd2\001" +
    "\002\000\026\022\147\030\066\032\065\033\070\034\062" +
    "\035\063\036\064\037\073\040\067\047\072\001\002\000" +
    "\004\056\150\001\002\000\004\044\161\001\002\000\006" +
    "\021\153\056\152\001\002\000\004\044\154\001\002\000" +
    "\052\005\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\022\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\046\uffdd\047\uffdd" +
    "\051\uffdd\001\002\000\004\055\155\001\002\000\004\023" +
    "\156\001\002\000\036\007\047\012\057\017\042\020\053" +
    "\024\043\025\050\027\054\041\056\045\060\050\041\052" +
    "\045\053\044\054\046\056\052\001\002\000\026\030\066" +
    "\032\065\033\070\034\062\035\063\036\064\037\073\040" +
    "\067\043\160\047\072\001\002\000\006\021\uffc1\056\uffc1" +
    "\001\002\000\004\055\162\001\002\000\004\023\163\001" +
    "\002\000\036\007\047\012\057\017\042\020\053\024\043" +
    "\025\050\027\054\041\056\045\060\050\041\052\045\053" +
    "\044\054\046\056\052\001\002\000\026\030\066\032\065" +
    "\033\070\034\062\035\063\036\064\037\073\040\067\043" +
    "\165\047\072\001\002\000\006\021\uffc0\056\uffc0\001\002" +
    "\000\040\007\047\012\057\017\042\020\053\024\043\025" +
    "\050\027\054\041\056\045\060\046\172\050\041\052\045" +
    "\053\044\054\046\056\052\001\002\000\036\007\047\012" +
    "\057\017\042\020\053\024\043\025\050\027\054\041\056" +
    "\045\060\050\041\052\045\053\044\054\046\056\052\001" +
    "\002\000\052\005\uffe8\006\uffe8\010\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\022\uffe8\030\066\032\065\033\070\034\062\035" +
    "\063\036\064\037\073\040\067\042\uffe8\043\uffe8\046\uffe8" +
    "\047\072\051\uffe8\001\002\000\006\042\104\046\173\001" +
    "\002\000\052\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\022\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\046\uffe2" +
    "\047\uffe2\051\uffe2\001\002\000\052\005\uffe3\006\uffe3\010" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042" +
    "\uffe3\043\uffe3\046\uffe3\047\uffe3\051\uffe3\001\002\000\004" +
    "\043\uffef\001\002\000\052\005\uffdb\006\uffdb\010\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\022\uffdb\030\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\067\042\uffdb\043" +
    "\uffdb\046\uffdb\047\072\051\uffdb\001\002\000\026\016\177" +
    "\030\066\032\065\033\070\034\062\035\063\036\064\037" +
    "\073\040\067\047\072\001\002\000\036\007\047\012\057" +
    "\017\042\020\053\024\043\025\050\027\054\041\056\045" +
    "\060\050\041\052\045\053\044\054\046\056\052\001\002" +
    "\000\026\005\201\030\066\032\065\033\070\034\062\035" +
    "\063\036\064\037\073\040\067\047\072\001\002\000\036" +
    "\007\047\012\057\017\042\020\053\024\043\025\050\027" +
    "\054\041\056\045\060\050\041\052\045\053\044\054\046" +
    "\056\052\001\002\000\026\006\203\030\066\032\065\033" +
    "\070\034\062\035\063\036\064\037\073\040\067\047\072" +
    "\001\002\000\052\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\022\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\046" +
    "\uffe1\047\uffe1\051\uffe1\001\002\000\052\005\uffdc\006\uffdc" +
    "\010\uffdc\014\uffdc\015\uffdc\016\uffdc\022\uffdc\030\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\042\uffdc\043\uffdc\046\uffdc\047\uffdc\051\uffdc\001\002\000" +
    "\026\014\206\030\066\032\065\033\070\034\062\035\063" +
    "\036\064\037\073\040\067\047\072\001\002\000\036\007" +
    "\047\012\057\017\042\020\053\024\043\025\050\027\054" +
    "\041\056\045\060\050\041\052\045\053\044\054\046\056" +
    "\052\001\002\000\026\015\210\030\066\032\065\033\070" +
    "\034\062\035\063\036\064\037\073\040\067\047\072\001" +
    "\002\000\052\005\uffe0\006\uffe0\010\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\022\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\046\uffe0" +
    "\047\uffe0\051\uffe0\001\002\000\042\003\216\007\047\012" +
    "\057\017\042\020\053\024\043\025\050\027\054\041\056" +
    "\045\060\050\041\051\220\052\045\053\044\054\046\056" +
    "\052\001\002\000\004\043\215\001\002\000\026\030\066" +
    "\032\065\033\070\034\062\035\063\036\064\037\073\040" +
    "\067\043\214\047\072\001\002\000\042\003\uffc8\007\uffc8" +
    "\012\uffc8\017\uffc8\020\uffc8\024\uffc8\025\uffc8\027\uffc8\041" +
    "\uffc8\045\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\056\uffc8\001\002\000\042\003\uffc6\007\uffc6\012\uffc6\017" +
    "\uffc6\020\uffc6\024\uffc6\025\uffc6\027\uffc6\041\uffc6\045\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\056\uffc6\001" +
    "\002\000\004\043\222\001\002\000\026\030\066\032\065" +
    "\033\070\034\062\035\063\036\064\037\073\040\067\043" +
    "\221\047\072\001\002\000\052\005\uffdf\006\uffdf\010\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\022\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf" +
    "\043\uffdf\046\uffdf\047\uffdf\051\uffdf\001\002\000\042\003" +
    "\uffc9\007\uffc9\012\uffc9\017\uffc9\020\uffc9\024\uffc9\025\uffc9" +
    "\027\uffc9\041\uffc9\045\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\056\uffc9\001\002\000\042\003\uffc7\007\uffc7" +
    "\012\uffc7\017\uffc7\020\uffc7\024\uffc7\025\uffc7\027\uffc7\041" +
    "\uffc7\045\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\056\uffc7\001\002\000\006\003\234\056\027\001\002\000" +
    "\004\044\225\001\002\000\004\055\226\001\002\000\004" +
    "\050\227\001\002\000\040\003\230\007\047\012\057\017" +
    "\042\020\053\024\043\025\050\027\054\041\056\045\060" +
    "\050\041\052\045\053\044\054\046\056\052\001\002\000" +
    "\004\051\233\001\002\000\026\030\066\032\065\033\070" +
    "\034\062\035\063\036\064\037\073\040\067\047\072\051" +
    "\232\001\002\000\004\043\ufff4\001\002\000\004\043\ufff0" +
    "\001\002\000\010\042\uffec\044\034\046\uffec\001\002\000" +
    "\006\042\uffee\046\uffee\001\002\000\006\026\131\043\uffbe" +
    "\001\002\000\006\026\131\043\uffbe\001\002\000\004\043" +
    "\ufff1\001\002\000\004\043\ufff2\001\002\000\004\043\246" +
    "\001\002\000\004\043\245\001\002\000\004\043\ufff9\001" +
    "\002\000\010\003\ufff7\051\ufff7\056\ufff7\001\002\000\010" +
    "\003\ufff5\051\ufff5\056\ufff5\001\002\000\010\003\ufff6\051" +
    "\ufff6\056\ufff6\001\002\000\010\003\ufff8\051\ufff8\056\021" +
    "\001\002\000\010\003\242\051\252\056\021\001\002\000" +
    "\004\043\ufffa\001\002\000\010\003\242\051\254\056\021" +
    "\001\002\000\004\043\ufffb\001\002\000\010\002\ufffe\003" +
    "\ufffe\004\ufffe\001\002\000\010\002\uffff\003\257\004\010" +
    "\001\002\000\004\043\262\001\002\000\004\043\261\001" +
    "\002\000\010\002\ufffd\003\ufffd\004\ufffd\001\002\000\010" +
    "\002\ufffc\003\ufffc\004\ufffc\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\010\003\004\004\003\005\006\001\001\000" +
    "\004\005\257\001\001\000\002\001\001\000\006\004\255" +
    "\005\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\252\007\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\017\007\016\001\001\000\002\001\001\000\004\007\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\023\011\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\054\001\001\000\006\013\210\014\212" +
    "\001\001\000\004\014\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\175\001\001\000\004\014\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\145\001\001\000\004" +
    "\014\144\001\001\000\002\001\001\000\004\014\142\001" +
    "\001\000\004\015\122\001\001\000\004\014\060\001\001" +
    "\000\002\001\001\000\004\014\121\001\001\000\004\014" +
    "\120\001\001\000\004\014\117\001\001\000\004\014\116" +
    "\001\001\000\004\014\115\001\001\000\002\001\001\000" +
    "\004\014\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\100" +
    "\014\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\112\014\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\127\001\001" +
    "\000\002\001\001\000\004\014\131\001\001\000\002\001" +
    "\001\000\004\015\135\001\001\000\004\014\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\141\001" +
    "\001\000\004\014\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\170\014\102\001" +
    "\001\000\004\014\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\177" +
    "\001\001\000\002\001\001\000\004\014\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\240\001\001\000\004\017\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\250\007\016" +
    "\001\001\000\004\007\242\001\001\000\002\001\001\000" +
    "\004\007\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optional_init ::= 
            {
              Expression RESULT = null;
		 RESULT = new no_expr(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*optional_init*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optional_init ::= ASSIGN expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*optional_init*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_list ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Cases RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(new branch(curr_lineno(), o, t, e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*case_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // case_list ::= case_list OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Cases RESULT = null;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = cl.appendElement(new branch(curr_lineno(), o, t, e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*case_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // let_list ::= error COMMA let_list 
            {
              Expression RESULT = null;
		Expression ll = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = ll; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*let_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // let_list ::= error IN expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*let_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // let_list ::= OBJECTID COLON TYPEID optional_init IN expr 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression oi = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), o, t, oi, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*let_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // let_list ::= OBJECTID COLON TYPEID optional_init COMMA let_list 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression oi = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression ll = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), o, t, oi, ll); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*let_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_sequ ::= error SEMI 
            {
              Expressions RESULT = null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr_sequ*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_sequ ::= expr_sequ error SEMI 
            {
              Expressions RESULT = null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = es; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr_sequ*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_sequ ::= expr SEMI 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr_sequ*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_sequ ::= expr_sequ expr SEMI 
            {
              Expressions RESULT = null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = es.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr_sequ*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_list ::= expr_list COMMA error 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = el; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_list ::= expr 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_list ::= expr_list COMMA expr 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= BOOL_CONST 
            {
              Expression RESULT = null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= STR_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= INT_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= OBJECTID 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new object(curr_lineno(), o); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr EQ expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr LE expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr LT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= NEG expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= ISVOID expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new isvoid(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NEW TYPEID 
            {
              Expression RESULT = null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new new_(curr_lineno(), t); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= CASE expr OF case_list ESAC 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LET let_list 
            {
              Expression RESULT = null;
		Expression ll = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = ll; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= LBRACE expr_sequ RBRACE 
            {
              Expression RESULT = null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(), es); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(), e1, e2, e3); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= OBJECTID LPAREN RPAREN 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, new Expressions(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, el); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr DOT OBJECTID LPAREN RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new dispatch(curr_lineno(), e, o, new Expressions(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DOT OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), e, o, el); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new static_dispatch(curr_lineno(), e, t, o, new Expressions(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(), e, t, o, el); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new assign(curr_lineno(), o, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formal ::= error COLON TYPEID 
            {
              Formal RESULT = null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new formalc(curr_lineno(), null, t); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal ::= OBJECTID COLON error 
            {
              Formal RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new formalc(curr_lineno(), o, null); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new formalc(curr_lineno(), o, t); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_list ::= formal_list COMMA error 
            {
              Formals RESULT = null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = fl; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal_list ::= formal 
            {
              Formals RESULT = null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT = null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // feature ::= OBJECTID LPAREN RPAREN COLON TYPEID LBRACE error RBRACE 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol r = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		 RESULT = new method(curr_lineno(), o, new Formals(curr_lineno()), r, null); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE error RBRACE 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-8)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol r = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		 RESULT = new method(curr_lineno(), o, fl, r, null); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // feature ::= OBJECTID COLON error optional_init 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression oi = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new attr(curr_lineno(), o, null, oi); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // feature ::= OBJECTID COLON TYPEID optional_init 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression oi = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new attr(curr_lineno(), o, t, oi); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // feature ::= OBJECTID LPAREN RPAREN COLON TYPEID LBRACE expr RBRACE 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol r = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new method(curr_lineno(), o, new Formals(curr_lineno()), r, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-8)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol r = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new method(curr_lineno(), o, fl, r, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dummy_feature_list ::= dummy_feature_list error SEMI 
            {
              Features RESULT = null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = fl; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dummy_feature_list ::= feature SEMI 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dummy_feature_list ::= dummy_feature_list feature SEMI 
            {
              Features RESULT = null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dummy_feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class ::= CLASS TYPEID INHERITS error LBRACE dummy_feature_list RBRACE 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new class_c(curr_lineno(), n, null, fl, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new class_c(curr_lineno(), n, p, fl, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS TYPEID LBRACE dummy_feature_list RBRACE 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   fl, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_list ::= class_list error SEMI 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = cl; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list class SEMI 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class SEMI 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

